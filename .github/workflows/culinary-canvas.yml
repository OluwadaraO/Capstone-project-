name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses : actions/checkout@v2

    - name : Set up Node.js
      uses: actions/setup-node@v4.0.3
      with:
        node-version: '14'
        
    - name : Check installed packages
      working-directory: ${{github.workspace}}/culinary-canvas/capstone-project/backend
      run: npm list @prisma/client

    - name : Install Prisma Client
      working-directory: ${{github.workspace}}/culinary-canvas/capstone-project/backend
      run: npm install @prisma/client
      
    - name : Generate Prisma Client
      working-directory: ${{github.workspace}}/culinary-canvas/capstone-project/backend
      run: npx prisma generate
      
    - name: Install backend dependencies
      working-directory: ${{github.workspace}}/culinary-canvas/capstone-project/backend
      run: npm ci

    - name: Install frontend dependencies
      working-directory: ${{github.workspace}}/culinary-canvas/capstone-project/frontend/capstone-project
      run: npm ci

    - name: Check backend startup
      working-directory: ${{github.workspace}}/culinary-canvas/capstone-project/backend
      run: |
        node -e "require('./index.js')"

    - name: Test get recipes
      env:
        AUTH_TOKEN: ${{secrets.AUTH_TOKEN}}
        
      run: |
        node -e "
        const https = require('https);
        const options = {
          hostname: 'localhost',
          port: 3000,
          path: '/recipes',
          method: 'GET',
          headers: {
            'Authorization': 'Bearer ' + process.env.AUTH_TOKEN
          }
        };
        const req = https.request(options, (res) => {
          if (res.statusCode === 200){
            console.log('Backend is running correctly')
            process.exit(0)
          } else{
            console.log('Backend is not running correctly. Status: ', res.statusCode);
          }
        });
        req.on('error', (error) => {
          console.error('Error: ', error);
          process.exit(1);
        });
        req.end();"

    - name: Test web scraping flow
      env:
        TEST_URL: ${{secrets.TEST_URL}}
        USER_ID: ${{secrets.USER_ID}}
      run : |
        node -e "
        const https = require('https');
        const options = {
          hostname : 'localhost',
          port: 3000,
          path: '/scrape-recipe',
          method: 'POST',
          headers: {
            'Content-Type' : 'application/json'
          }
        };
        const req = https.request(options, (res) => {
        if (res.statusCode === 200){
          console.log('Web scraping flow is working correctly');
          process.exit(0);
        }else{
          console.log('Web scraping flow is not working correctly');
          console.log('Status Code: ', res.statusCode);
          process.exit(1)
        }
        });
        req.on('error', (error) => {
          console.error('Error: ', error);
          process.exit(1)
        });
        req.write(JSON.stringify({
           url: process.env.TEST_URL,
           userId: process.env.USER_ID
        }));
        req.end();"

    - name: Build frontend
      working-directory: ${{github.workspace}}/culinary-canvas/capstone-project/frontend/capstone-project
      run: npm run build

    - name: Start backend server
      working-directory: ${{github.workspace}}/culinary-canvas/capstone-project/backend
      run: |
        pwd
        ls -la
        node index.js &
        echo $! > backend_pid.txt
