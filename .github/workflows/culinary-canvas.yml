name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses : actions/checkout@v2

    - name : Set up Node.js
      uses: actions/setup-node@v4.0.3
      with:
        node-version: '18'
        
    - name: Display package.json
      working-directory: culinary-canvas/capstone-project/backend
      run: cat package.json

    - name: Generate Prisma Client
      working-directory: culinary-canvas/capstone-project/backend
      run: npx prisma generate
      
    - name: Install backend dependencies
      working-directory: culinary-canvas/capstone-project/backend
      run: npm install

    - name: Install frontend dependencies
      working-directory: culinary-canvas/capstone-project/frontend/my_capstone_project
      run: npm ci

    - name: Build frontend
      working-directory: culinary-canvas/capstone-project/frontend/my_capstone_project
      run: npm run build
      
    - name: Start backend server
      working-directory: culinary-canvas/capstone-project/backend
      env:
        DATABASE_URL : ${{secrets.DATABASE_URL}}
        SECRET_KEY: ${{secrets.JWT_SECRET_TOKEN}}
        PRIVATE_VAPID_KEY: ${{ secrets.PRIVATE_VAPID_KEY }}
        PUBLIC_VAPID_KEY: ${{ secrets.PUBLIC_VAPID_KEY }}
      run: |
        node index.js &
        echo $! > backend_pid.txt
        sleep 15
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with: 
        python-version: '3.x'

    - name : Check installed packages
      working-directory: culinary-canvas/capstone-project/backend
      run: npm list @prisma/client

    - name : Install Prisma Client
      working-directory: culinary-canvas/capstone-project/backend
      run: npm install @prisma/client
      
    - name : Generate Prisma Client
      working-directory: culinary-canvas/capstone-project/backend
      run: npx prisma generate

    - name: Install node-fetch
      run: npm install node-fetch

    - name: Create account and run tests
      id: auth
      run: |
        node -e "
        const fetch = require('node-fetch');
        BASE_URL = process.env.BACKEND_ADDRESS
        TEST_USERNAME = process.env.TEST_USERNAME
        TEST_PASSWORD = process.env.TEST_PASSWORD

        async function createAccountandLogin(){
          let response = await fetch(`http://localhost:3000/create`, {
            method: 'POST',
            headers: {
              'Content-Type' : 'application/json',
            },
            body: JSON.stringify({
              userName: TEST_USERNAME,
              name: 'Test User',
              password: TEST_PASSWORD
            }),
          });
          let data = await response.json();
          if (response.status !== 200 || !data.newUserAccount){
            throw new Error(`Failed to create account: ${JSON.stringify(data)}`);
          }
          console.log('Account created successfully!');

          response = await fetch(`http://localhost:3000/login`, {
            method: 'POST',
            headers: {
              'Content-Type' : 'application/json',
            },
            body: JSON.stringify({
              userName: TEST_USERNAME,
              password: TEST_PASSWORD
            }),
          });
          data = await response.json();
          if(!data.token){
            throw new Error('Failed to login')
          };
          console.log('Login successful');

          console.log(`::set-output name=token::${data.token}`)
        }

        createAccountandLogin().catch(error => {
          console.error('Test failed: ', error);
        });

        "
      env: 
        BASE_URL: http://localhost:3000
        TEST_USERNAME: ${{github.sha}}-testuser
        TEST_PASSWORD: ${{github.sha}}-testpassword

    - name: Test protected route
      run: |
        node -e "
        const fetch = require('node-fetch');
        BASE_URL = process.env.BACKEND_ADDRESS
        TOKEN = process.env.TOKEN

        async function testProtectedRoute() {
          const response = await fetch(`http://localhost:3000/protected`, {
            headers: {
              Cookie: `token=${TOKEN}`
            }
          });
          const data = await response.json();
          if(!data.id){
            throw new Error('Failed to access protected route');
          }
          console.log('Protected route access successful')
        }
        testProtectedRoute().catch(error => {
          console.error('Test failed: ', error);
        });
        "
      env:
        BASE_URL: http://localhost:3000
        TOKEN: ${{steps.auth.outputs.token}}
      
    - name: Test Python script
      working-directory: culinary-canvas/capstone-project/backend
      run: |
        python3 webScraper.py "${{secrets.TEST_URL}}"

    - name: Test get recipes
      env:
        AUTH_TOKEN: ${{secrets.AUTH_TOKEN}}
        
      run: |
        node -e "
        const http = require('http');
        const options = {
          hostname: '127.0.0.1',
          port: 3000,
          path: '/recipes',
          method: 'GET',
          headers: {
            'Authorization': 'Bearer ' + process.env.AUTH_TOKEN
          }
        };
        const req = http.request(options, (res) => {
          res.setEncoding('utf8');
          res.on('data', (chunk) => {
            console.log('Response: '+ chunk);
          });
          res.on('end', () => {
            if (res.statusCode === 200){
              console.log('Backend is running correctly')
              process.exit(0)
            } else{
              console.log('Backend is not running correctly. Status: ', res.statusCode);
            };
          });
        });
        req.on('error', (error) => {
          console.error('Error: ', error);
          process.exit(1);
        });
        req.end();"


    - name: Test web scraping flow
      env:
        TEST_URL: "${{secrets.TEST_URL}}"
        USER_ID: ${{secrets.USER_ID}}
      run : |
        node -e "
        const http = require('http');
        const options = {
          hostname : '127.0.0.1',
          port: 3000,
          path: '/scrape-recipe',
          method: 'POST',
          headers: {
            'Content-Type' : 'application/json'
          }
        };
        const req = http.request(options, (res) => {
          res.setEncoding('utf8');
          res.on('data', (chunk) => {
            console.log('Response: '+ chunk);
          });
          res.on('end', () => {
            if (res.statusCode === 200){
              console.log('Web scraping flow is working correctly');
              process.exit(0);
            }else{
              console.log('Web scraping flow is not working correctly');
              console.log('Status Code: ', res.statusCode);
            }
          });
        });
        req.on('error', (error) => {
          console.error('Error: ', error);
          process.exit(1)
        });
        const postData = JSON.stringify({
           url: process.env.TEST_URL,
           userId: parseInt(process.env.USER_ID, 10)
        });
        console.log('Sending request with data: ', postData);
        req.write(postData);
        req.end();"
  
