// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users{
  id Int @id @default(autoincrement())
  userName String @unique
  name String
  password String
  imageUrl String?
  savedRecipes SavedRecipe[]
  likedRecipes LikedRecipe[]
  groceryLists GroceryList[]
  ratings Rating[]
  userPreferences UserPreferences?
  mealPlanners MealPlanner[]
  notifications Notification[]
  subscriptions NotificationSubscription?
  scrapedRecipes ScrapedRecipe[]
}

model Notification{
  id Int @id @default(autoincrement())
  userId Int
  subject String
  message String
  recipes Json
  read Boolean @default(false)
  createdAt DateTime @default(now())
  user Users @relation(fields: [userId], references:[id], onDelete: Cascade)
}

model NotificationSubscription{
  id Int @id @default(autoincrement())
  userId Int @unique
  endpoint String
  p256dh String
  auth String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user Users @relation(fields: [userId], references:[id], onDelete: Cascade)
}

model ScrapedRecipe{
  id Int @id @default(autoincrement())
  url String
  title String
  ingredients String[]
  calories String
  imageUrl String
  userId Int
  user Users @relation(fields: [userId], references:[id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MealPlanner{
  id Int @id @default(autoincrement())
  userId Int
  day String
  mealType String
  recipeId String
  recipeName String
  recipeImage String
  recipeUrl String
  user Users @relation(fields: [userId], references:[id], onDelete: Cascade)
}

model UserPreferences{
  id Int  @id @default(autoincrement())
  userId Int @unique
  cookingLevel String
  dietaryPreferences String[]
  favoriteFoods String[]
  user Users @relation(fields: [userId], references:[id], onDelete: Cascade)
}

model SavedRecipe{
  id Int @id @default(autoincrement())
  userId Int
  recipeId String
  recipeName String
  recipeImage String
  user Users @relation(fields: [userId], references:[id], onDelete: Cascade)
}

model LikedRecipe{
  id Int @id @default(autoincrement())
  userId Int
  recipeId String
  recipeName String
  recipeImage String
  user Users @relation(fields: [userId], references:[id], onDelete: Cascade)
}

model GroceryList{
  id Int @id @default(autoincrement())
  userId Int
  itemName String
  quantity Int
  user Users @relation(fields: [userId], references:[id], onDelete: Cascade)
}

model Rating{
  id Int @id @default(autoincrement())
  userId Int
  recipeId String
  rating Int
  user Users @relation(fields: [userId], references:[id], onDelete: Cascade)

  @@unique([userId, recipeId])
}
